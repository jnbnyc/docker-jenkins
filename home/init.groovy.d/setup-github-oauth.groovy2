@Grapes([
    @Grab(group='org.yaml', module='snakeyaml', version='1.17')
])

import org.yaml.snakeyaml.Yaml
import java.util.logging.Logger

import hudson.security.SecurityRealm
import org.jenkinsci.plugins.GithubSecurityRealm

// import jenkins.model.*
if (Jenkins.instance.pluginManager.activePlugins.find { it.shortName == 'github-oauth' } != null) {


env = System.getenv()
JENKINS_SETUP_YAML = env['JENKINS_SETUP_YAML'] ?: "${env['JENKINS_CONFIG_HOME']}/setup.yml"
Logger logger = Logger.getLogger('setup-master-config.groovy')
def config = new Yaml().load(new File(JENKINS_SETUP_YAML).text)

    String githubWebUri = env['GITHUB_WEB_URI'] ?: config.github.oauth.web_uri ?: 'https://github.com'
    String githubApiUri = env['GITHUB_API_URI'] ?: config.github.oauth.api_uri ?: 'https://api.github.com'
    String clientID = env['GITHUB_CLIENT_ID'] ?: config.github.oauth.client_id ?: 'someid'
    String clientSecret = env['GITHUB_CLIENT_SECRET'] ?: config.github.oauth.client_secret ?: 'somesecret'
    String oauthScopes = 'read:org'
    SecurityRealm github_realm = new GithubSecurityRealm(githubWebUri, githubApiUri, clientID, clientSecret, oauthScopes)
    //check for equality, no need to modify the runtime if no settings changed
    if(!github_realm.equals(Jenkins.instance.getSecurityRealm())) {
        Jenkins.instance.setSecurityRealm(github_realm)
        Jenkins.instance.save()
    }

    //----

    import org.jenkinsci.plugins.GithubAuthorizationStrategy
    import hudson.security.AuthorizationStrategy

    //permissions are ordered similar to web UI
    //Admin User Names
    String adminUserNames = env['JENKINS_ADMIN_USERNAME'] ?: config.admin.username ?: 'admin'
    //Participant in Organization
    String organizationNames = env['GITHUB_ORG'] ?: config.github.orgname ?: ''
    //Use Github repository permissions
    boolean useRepositoryPermissions = true
    //Grant READ permissions to all Authenticated Users
    boolean authenticatedUserReadPermission = false
    //Grant CREATE Job permissions to all Authenticated Users
    boolean authenticatedUserCreateJobPermission = false
    //Grant READ permissions for /github-webhook
    boolean allowGithubWebHookPermission = false
    //Grant READ permissions for /cc.xml
    boolean allowCcTrayPermission = false
    //Grant READ permissions for Anonymous Users
    boolean allowAnonymousReadPermission = false
    //Grant ViewStatus permissions for Anonymous Users
    boolean allowAnonymousJobStatusPermission = false

    AuthorizationStrategy github_authorization = new GithubAuthorizationStrategy(adminUserNames,
        authenticatedUserReadPermission,
        useRepositoryPermissions,
        authenticatedUserCreateJobPermission,
        organizationNames,
        allowGithubWebHookPermission,
        allowCcTrayPermission,
        allowAnonymousReadPermission,
        allowAnonymousJobStatusPermission)

    //check for equality, no need to modify the runtime if no settings changed
    if(!github_authorization.equals(Jenkins.instance.getAuthorizationStrategy())) {
        Jenkins.instance.setAuthorizationStrategy(github_authorization)
        Jenkins.instance.save()
    }
}
